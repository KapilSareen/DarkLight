[gd_scene load_steps=4 format=3 uid="uid://b3hro2qglaiqm"]

[ext_resource type="Texture2D" uid="uid://bfgsxfuv4t0gb" path="res://Assets/white_pixel.png" id="3_ap102"]

[sub_resource type="Shader" id="Shader_1hfa6"]
code = "// Sprite Particle Explosion Shader for Godot 4.3
// Port of PlayWithFurcifers shader: https://www.youtube.com/watch?v=D7XSL0zBOwI
// Updated by ChatGPT

shader_type particles;
render_mode disable_velocity;

uniform float spread = 180.0;
uniform float inherit_emitter_velocity_ratio = 0.0;
uniform float initial_linear_velocity_min = 100.0;
uniform float initial_linear_velocity_max = 100.0;
uniform float orbit_velocity_min;
uniform float orbit_velocity_max;
uniform float radial_velocity_min;
uniform float radial_velocity_max;
uniform float linear_accel_min;
uniform float linear_accel_max;
uniform float radial_accel_min;
uniform float radial_accel_max;
uniform float tangent_accel_min;
uniform float tangent_accel_max;
uniform float damping_min;
uniform float damping_max;
uniform float scale_min = 1.0;
uniform float scale_max = 1.0;
uniform float lifetime_randomness;
uniform vec3 emission_shape_offset = vec3(0.0);
uniform vec3 emission_shape_scale = vec3(1.0);
uniform vec3 emission_box_extents = vec3(100.0, 100.0, 0.0);
uniform sampler2D sprite : hint_albedo;

// Random number generation functions
float rand_from_seed(inout uint seed) {
    int k;
    int s = int(seed);
    if (s == 0)
        s = 305420679;
    k = s / 127773;
    s = 16807 * (s - k * 127773) - 2836 * k;
    if (s < 0)
        s += 2147483647;
    seed = uint(s);
    return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
    return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
    x = ((x >> uint(16)) ^ x) * uint(73244475);
    x = ((x >> uint(16)) ^ x) * uint(73244475);
    x = (x >> uint(16)) ^ x;
    return x;
}

// Structs for Particle Properties
struct DisplayParameters {
    vec3 scale;
    float lifetime;
};

struct DynamicsParameters {
    float initial_velocity_multiplier;
    float radial_velocity;
    float orbit_velocity;
};

struct PhysicalParameters {
    float linear_accel;
    float radial_accel;
    float tangent_accel;
    float damping;
};

// Initialize Physical Parameters
void calculate_initial_physical_params(inout PhysicalParameters params, inout uint alt_seed) {
    params.linear_accel = mix(linear_accel_min, linear_accel_max, rand_from_seed(alt_seed));
    params.radial_accel = mix(radial_accel_min, radial_accel_max, rand_from_seed(alt_seed));
    params.tangent_accel = mix(tangent_accel_min, tangent_accel_max, rand_from_seed(alt_seed));
    params.damping = mix(damping_min, damping_max, rand_from_seed(alt_seed));
}

// Initialize Dynamics Parameters
void calculate_initial_dynamics_params(inout DynamicsParameters params, inout uint alt_seed) {
    params.initial_velocity_multiplier = mix(initial_linear_velocity_min, initial_linear_velocity_max, rand_from_seed(alt_seed));
    params.radial_velocity = mix(radial_velocity_min, radial_velocity_max, rand_from_seed(alt_seed));
    params.orbit_velocity = mix(orbit_velocity_min, orbit_velocity_max, rand_from_seed(alt_seed));
}

// Initialize Display Parameters
void calculate_initial_display_params(inout DisplayParameters params, inout uint alt_seed) {
    params.scale = vec3(mix(scale_min, scale_max, rand_from_seed(alt_seed)));
    params.scale = sign(params.scale) * max(abs(params.scale), 0.001);
    params.lifetime = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
}

// Calculate Initial Position
vec3 calculate_initial_position(inout uint alt_seed) {
    vec3 pos = vec3(rand_from_seed(alt_seed) * 2.0 - 1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, rand_from_seed(alt_seed) * 2.0 - 1.0) * emission_box_extents;
    return pos * emission_shape_scale + emission_shape_offset;
}

// Calculate Random Spread Direction
vec3 get_random_direction_from_spread(inout uint alt_seed, float spread_angle) {
    float spread_rad = radians(spread_angle);
    float angle1_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;
    float angle2_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;

    vec3 direction_xz = vec3(sin(angle1_rad), 0.0, cos(angle1_rad));
    vec3 direction_yz = vec3(0.0, sin(angle2_rad), cos(angle2_rad));

    vec3 spread_direction = vec3(direction_xz.x * direction_yz.z, direction_yz.y, direction_xz.z * direction_yz.z);
    return normalize(spread_direction);
}

// Start Function
void start() {
    uint base_number = NUMBER;
    uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);

    DisplayParameters params;
    calculate_initial_display_params(params, alt_seed);

    DynamicsParameters dynamic_params;
    calculate_initial_dynamics_params(dynamic_params, alt_seed);

    PhysicalParameters physics_params;
    calculate_initial_physical_params(physics_params, alt_seed);

    if (rand_from_seed(alt_seed) > AMOUNT_RATIO) {
        ACTIVE = false;
    }

    if (RESTART_POSITION) {
        TRANSFORM[3].xyz = calculate_initial_position(alt_seed);
        TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
    }

    if (RESTART_VELOCITY) {
        VELOCITY = get_random_direction_from_spread(alt_seed, spread) * dynamic_params.initial_velocity_multiplier;
    }

    VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
    VELOCITY += EMITTER_VELOCITY * inherit_emitter_velocity_ratio;

    vec2 particlePosition = TRANSFORM[3].xy;
    vec2 textureSize = vec2(textureSize(sprite, 0));
    vec4 spriteColor = texture(sprite, particlePosition / textureSize + vec2(0.5, 0.5));
    COLOR = spriteColor;

    if (spriteColor.a == 0.0) {
        ACTIVE = false;
    }
}

// Process Function
void process() {
    CUSTOM.y += DELTA / LIFETIME;
    CUSTOM.y = mix(CUSTOM.y, 1.0, INTERPOLATE_TO_END);

    if (CUSTOM.y > CUSTOM.w) {
        ACTIVE = false;
    }
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_pfved"]
shader = SubResource("Shader_1hfa6")

[node name="GPUParticles2D" type="GPUParticles2D"]
amount = 1000
process_material = SubResource("ShaderMaterial_pfved")
texture = ExtResource("3_ap102")
explosiveness = 1.0
local_coords = true
